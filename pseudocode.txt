pseudocode for actual transposing

user input for what key they want to transpose to (or number of half steps up/down?)
-ask transpose up or down

check current key (fifths element)
-if positive int, in sharps
-if negative int, in flats
-if 0, then in they key of C

make an array with the circle of fifths and their keys = 
	ex. hSteps = 3
		direction = down

	loop(pitches.length)


	0		1		2		3		4		5			6			7				8		9		  10		11

[[c, 0], [g, 1], [d, 2], [a, 3], [e, 4], [b, 5], [f#/gb, 6/-6], [c#/db, 7/-5], [ab, -4], [eb, -3], [bb, -2], [f, -1]]

3 half steps: key of G to B flat ---array index 1 to 10 (12), fifths: 1 to -2
			  key of A to C ---array index 3 to 0, fifths: 3 to 0
			  key of Db to E ---array index 7 to 4, fifths: -5 to 4

//say it's in the key of B Flat currently (fifths = -2)
//user wants it to be in key of G (fifths = 1)
-change fifths element to user input


if alter = -1, then flatted (down a step, could be a natural)
if alter = 1, then sharped (up a step, could be a natural)


//FIRST JUST MAKE THIS WORK FOR ONE HALF STEP. THIS CAN BE REPEATED FOR MULTIPLE.

see what current pitch is by looking at step and alter

if direction = up:

	case no alter:
		if(step = e)
			new step = f
		else if(step = b)
			new step = c
		else
			do not change step name
			alter = 1

	case alter = 1
		if(step = e) //aka moving e# (f) up to f#
			alter = 1
		else if(step = b) //aka moving b# (c) up to c#
			alter = 1
		else
			alter = 0
		move step name up 1 // do this no matter what 

	case alter = -1
		if(step = f) //aka moving fb (e) up to f
			alter = 0
		else if(step = c) //aka moving cb (b) up to c
			alter = 0
		do not change step name
		alter = 0


else if direction = down: -> look at step and alter variables

	case no alter: ex. d to d flat
		if(step = f)
			new step = e
		else if(step = c)
			new step = b
		else
			do not change step name
			alter = -1

	case alter = 1: ex. d# to d
	//i may decided to change the special cases of this one later
		do not change step name
		alter = 0

	case alter = -1: ex. d flat to c
		if(step = f) //aka moving fb (e) down to e flat
			alter = -1
		else if(step = c) //aka moving cb (b) down to b flat
			alter = -1
		else
			alter = 0
		move step name down 1 //do this no matter what


